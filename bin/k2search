#!/usr/bin/env python
"""Script to search for transit-like signals from k2sc-detrended K2 light curves.

"""
from __future__ import division
import sys
import numpy as np
import pyfits as pf
import matplotlib as mpl
mpl.use('AGG')
import matplotlib.pyplot as pl
import pandas as pd
import seaborn as sb

from os.path import join, abspath, basename, exists
from collections import OrderedDict
from argparse import ArgumentParser
from time import sleep, time
from glob import glob
from copy import copy

from matplotlib.gridspec import GridSpec
from mpi4py import MPI

from k2ps.psearch import *

sb.set_style('white')
sb.set_context('paper')
mpl.rc('figure', figsize=(8.27, 11.69), dpi=100)
mpl.rc('axes', labelsize=7, titlesize=8)
mpl.rc('font', size=6)
mpl.rc('xtick', labelsize=7)
mpl.rc('ytick', labelsize=7)
mpl.rc('lines', linewidth=1)

pd.set_option('precision', 3)

if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('run_name', type=str)
    ap.add_argument('--data-dir', default='.', type=str)
    ap.add_argument('--save-dir', default='.', type=str)
    ap.add_argument('--plot-dir', default='.', type=str)
    ap.add_argument('--do-plots', action='store_true', default=False)
    ap.add_argument('--plot-format', type=str, default='pdf', choices=['pdf', 'png'], help='File format for plots')
    ap.add_argument('--start-i', default=0, type=int)
    ap.add_argument('--end-i', default=None, type=int)
    ap.add_argument('--period-limits', type=str, default=None)
    args = ap.parse_args()

    root = 0
    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
    size = comm.Get_size()
    is_root = rank == root

    if size < 2:
        print "Error, at least one worker node required.\nStart with mpirun -n N_WORKER_NODES+1 bls_search.py"
        sys.exit(1)

    sargs = {}
    if args.period_limits:
        sargs['period_range'] = np.fromstring(args.period_limits, count=2, sep=',')

    ## File IO node
    ## ------------
    if is_root:
        files = map(abspath, sorted(glob(join(args.data_dir,'*.fits'))))
        epics = array(map(lambda fn:int(basename(fn).split('_')[1]), files))	
        free_workers = range(1,size)
        active_workers = []

        all_items = files[args.start_i:args.end_i]
        items = copy(all_items)

        n_items = len(items)
        n_finished_items = 0

        hdfname = join(args.save_dir, args.run_name+'_bls.h5')

        def save(results):
            if len(results) > 2:
                hdf = pd.HDFStore(hdfname)
                hdf['planet_search'] = pd.DataFrame(np.hstack(results.values()))
                hdf.close()

        results = OrderedDict()
        time_last_save = time()
        while items or active_workers:
            ## Send an item
            while items and free_workers:
                w = free_workers.pop()
                comm.send(items.pop(), dest=w, tag=0)
                active_workers.append(w)

            ## Receive the results
            for w in active_workers:
                if comm.Iprobe(w, 2):
                    epic, res = comm.recv(source=w, tag=2)
                    results[epic] = res
                    free_workers.append(w)
                    active_workers.remove(w)
                    n_finished_items += 1
                    print "EPIC {:9d} {:3d}/{:3d}".format(epic, n_items,n_finished_items)
            
            if time() - time_last_save > 30:
                save(results)
                time_last_save = time()

        for w in free_workers:
            comm.send(-1, dest=w, tag=0)

        save(results)

    ## Worker node
    ## -----------
    else:
        if args.do_plots:
            PW,PH = 8.27, 11.69
            rc('axes', labelsize=7, titlesize=8)
            rc('font', size=6)
            rc('xtick', labelsize=7)
            rc('ytick', labelsize=7)
            rc('lines', linewidth=1)
            fig = pl.figure(figsize=(PW,PH))
            gs1 = GridSpec(3,3)
            gs1.update(top=0.98, bottom = 2/3.*1.03,hspace=0.07,left=0.07,right=0.96)
            gs = GridSpec(4,3)
            gs.update(top=2/3.*0.96,bottom=0.04,hspace=0.35,left=0.07,right=0.96)

            ax_lcpos = subplot(gs1[0,:])
            ax_lctime = subplot(gs1[1,:],sharex=ax_lcpos)
            ax_lcwhite = subplot(gs1[2,:],sharex=ax_lcpos)
            ax_lcfold = subplot(gs[2,1:])
            ax_lnlike = subplot(gs[1,2])
            ax_lcoe   = subplot(gs[0,1]),subplot(gs[0,2])
            ax_sde    = subplot(gs[3,1:])
            ax_transits = subplot(gs[1:,0])
            ax_info = subplot(gs[0,0])
            ax_ec = subplot(gs[1,1])
            axes = [ax_lctime,ax_lcpos,ax_lcwhite, ax_lcfold, ax_lnlike, ax_lcoe[0], ax_lcoe[1], ax_sde, ax_transits, ax_info, ax_ec]

        while True:
            fname = comm.recv(source=root, tag=0)
            if fname == -1:
                break
            ts = TransitSearch(fname, **sargs)
            ts()

            if args.do_plots:
                plot_dir = args.plot_dir
                if plot_dir == '.':
                    plot_dir = './'
                [a.clear() for a in axes]
                ts.plot_lc_pos(ax_lcpos)
                ts.plot_lc_time(ax_lctime)
                ts.plot_lc_white(ax_lcwhite)
                ts.plot_eclipse(ax_ec)
                ts.plot_lc(ax_lcfold)
                ts.plot_fit_and_eo(ax_lcoe)
                ts.plot_info(ax_info)
                ts.plot_lnlike(ax_lnlike)
                ts.plot_sde(ax_sde)
                ts.plot_transits(ax_transits)
                ax_lnlike.set_title('Ln likelihood per orbit')
                ax_transits.set_title('Individual transits')
                ax_ec.set_title('Secondary eclipse')
                ax_lcoe[0].set_title('Folded transit and model')
                ax_lcoe[1].set_title('Even and odd transits')
                ax_lcfold.set_title('Folded light curve')
                # fig.tight_layout()
                # fig.savefig(join(args.plot_dir,'epic_{:9d}.'.format(ts.epic)))
                print 'Saving to %sepic_%9d.%s' % (plot_dir,ts.epic,args.plot_format)
                fig.savefig('%sepic_%9d.%s' % (plot_dir,ts.epic,args.plot_format))
                
            comm.send((ts.epic, ts.result), dest=root, tag=2)    

